import React, { useState } from 'react'
import { useWikiStore, EntryCategory } from '../store/useWikiStore'
import { useSceneStore } from '../store/useSceneStore'

interface ImmersivePost {
  id: string
  type: 'character_writing' | 'rumor' | 'quote' | 'diary' | 'letter' | 'news'
  title: string
  content: string
  author: string
  authorType: 'character' | 'organization' | 'anonymous'
  timestamp: string
  sceneId?: string
  tags: string[]
  metadata: {
    reliability: number // 0-100 (噂の信憑性など)
    importance: number // 0-100
    spoilerLevel: number // 0-5
    targetAudience: string[] // ['public', 'nobles', 'scholars', etc.]
  }
}

interface ImmersivePostingSystemProps {
  isOpen: boolean
  onClose: () => void
}

export const ImmersivePostingSystem: React.FC<ImmersivePostingSystemProps> = ({
  isOpen,
  onClose
}) => {
  const { entries } = useWikiStore()
  const { getCurrentScene } = useSceneStore()
  
  const [postType, setPostType] = useState<ImmersivePost['type']>('character_writing')
  const [title, setTitle] = useState('')
  const [content, setContent] = useState('')
  const [author, setAuthor] = useState('')
  const [authorType, setAuthorType] = useState<'character' | 'organization' | 'anonymous'>('character')
  const [tags, setTags] = useState<string[]>([])
  const [reliability, setReliability] = useState(80)
  const [importance, setImportance] = useState(50)
  const [spoilerLevel, setSpoilerLevel] = useState(0)
  const [targetAudience, setTargetAudience] = useState<string[]>(['public'])

  const postTypeTemplates = {
    character_writing: {
      title: 'キャラクター執筆',
      placeholder: 'キャラクターの手記、日記、回想録など...',
      icon: '✍️',
      defaultTags: ['character', 'writing', 'personal']
    },
    rumor: {
      title: '噂・風聞',
      placeholder: '街で囁かれる噂、未確認情報など...',
      icon: '👂',
      defaultTags: ['rumor', 'gossip', 'unconfirmed']
    },
    quote: {
      title: '名言・格言',
      placeholder: 'キャラクターの印象的な発言、格言など...',
      icon: '💬',
      defaultTags: ['quote', 'wisdom', 'memorable']
    },
    diary: {
      title: '日記・記録',
      placeholder: '日々の出来事、観察記録など...',
      icon: '📔',
      defaultTags: ['diary', 'record', 'daily']
    },
    letter: {
      title: '手紙・文書',
      placeholder: '手紙、公文書、契約書など...',
      icon: '📜',
      defaultTags: ['letter', 'document', 'correspondence']
    },
    news: {
      title: 'ニュース・告知',
      placeholder: '公式発表、ニュース、告知など...',
      icon: '📰',
      defaultTags: ['news', 'announcement', 'official']
    }
  }

  const characterEntries = entries.filter(entry => entry.category === EntryCategory.CHARACTER)
  const organizationEntries = entries.filter(entry => entry.category === EntryCategory.ORGANIZATION)

  const handleSubmit = () => {
    const currentScene = getCurrentScene()
    
    const newPost: ImmersivePost = {
      id: `post-${Date.now()}`,
      type: postType,
      title,
      content,
      author,
      authorType,
      timestamp: new Date().toISOString(),
      sceneId: currentScene?.id,
      tags: [...tags, ...postTypeTemplates[postType].defaultTags],
      metadata: {
        reliability,
        importance,
        spoilerLevel,
        targetAudience
      }
    }

    // WikiエントリとしてImmersive Postを保存
    const wikiEntry = {
      title: `${postTypeTemplates[postType].icon} ${title}`,
      slug: `immersive-${newPost.id}`,
      content: {
        markdown: formatPostAsMarkdown(newPost),
        summary: `${author}による${postTypeTemplates[postType].title}`
      },
      tags: newPost.tags,
      category: EntryCategory.LORE,
      metadata: {
        readCount: 0,
        importance: newPost.metadata.importance,
        spoilerLevel: newPost.metadata.spoilerLevel,
        firstMentionScene: currentScene?.id,
        lastUpdateScene: currentScene?.id,
        immersivePost: newPost
      },
      relations: [],
      autoGenerated: false
    }

    // WikiStoreに保存
    const { addEntry } = useWikiStore.getState()
    addEntry(wikiEntry)
    
    // フォームをリセット
    resetForm()
    onClose()
  }

  const formatPostAsMarkdown = (post: ImmersivePost): string => {
    const template = postTypeTemplates[post.type]
    return `# ${template.icon} ${post.title}

**投稿者**: ${post.author} (${getAuthorTypeLabel(post.authorType)})
**投稿日時**: ${new Date(post.timestamp).toLocaleString('ja-JP')}
**信憑性**: ${post.metadata.reliability}%
**重要度**: ${post.metadata.importance}/100
**対象読者**: ${post.metadata.targetAudience.join(', ')}

---

${post.content}

---

*この投稿は${template.title}として分類されています。*
${post.metadata.spoilerLevel > 0 ? `\n⚠️ **ネタバレレベル**: ${post.metadata.spoilerLevel}/5` : ''}
`
  }

  const getAuthorTypeLabel = (type: string): string => {
    switch (type) {
      case 'character': return 'キャラクター'
      case 'organization': return '組織'
      case 'anonymous': return '匿名'
      default: return '不明'
    }
  }

  const resetForm = () => {
    setTitle('')
    setContent('')
    setAuthor('')
    setTags([])
    setReliability(80)
    setImportance(50)
    setSpoilerLevel(0)
    setTargetAudience(['public'])
  }

  const addTag = (tag: string) => {
    if (tag && !tags.includes(tag)) {
      setTags([...tags, tag])
    }
  }

  const removeTag = (tagToRemove: string) => {
    setTags(tags.filter(tag => tag !== tagToRemove))
  }

  if (!isOpen) return null

  const currentTemplate = postTypeTemplates[postType]

  return (
    <div className="immersive-posting-overlay">
      <div className="immersive-posting-modal">
        <div className="immersive-posting-header">
          <h2>📝 没入感投稿システム</h2>
          <button className="close-btn" onClick={onClose}>×</button>
        </div>

        <div className="immersive-posting-content">
          {/* 投稿タイプ選択 */}
          <div className="post-type-selector">
            <h3>投稿タイプ</h3>
            <div className="post-type-grid">
              {Object.entries(postTypeTemplates).map(([type, template]) => (
                <button
                  key={type}
                  className={`post-type-btn ${postType === type ? 'active' : ''}`}
                  onClick={() => setPostType(type as ImmersivePost['type'])}
                >
                  <span className="post-type-icon">{template.icon}</span>
                  <span className="post-type-title">{template.title}</span>
                </button>
              ))}
            </div>
          </div>

          {/* 基本情報 */}
          <div className="post-basic-info">
            <div className="form-row">
              <div className="form-group">
                <label>タイトル</label>
                <input
                  type="text"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  placeholder={`${currentTemplate.title}のタイトル`}
                />
              </div>
            </div>

            <div className="form-row">
              <div className="form-group">
                <label>投稿者タイプ</label>
                <select value={authorType} onChange={(e) => setAuthorType(e.target.value as any)}>
                  <option value="character">キャラクター</option>
                  <option value="organization">組織</option>
                  <option value="anonymous">匿名</option>
                </select>
              </div>
              
              <div className="form-group">
                <label>投稿者</label>
                {authorType === 'character' ? (
                  <select value={author} onChange={(e) => setAuthor(e.target.value)}>
                    <option value="">キャラクターを選択</option>
                    {characterEntries.map(entry => (
                      <option key={entry.id} value={entry.title}>{entry.title}</option>
                    ))}
                  </select>
                ) : authorType === 'organization' ? (
                  <select value={author} onChange={(e) => setAuthor(e.target.value)}>
                    <option value="">組織を選択</option>
                    {organizationEntries.map(entry => (
                      <option key={entry.id} value={entry.title}>{entry.title}</option>
                    ))}
                  </select>
                ) : (
                  <input
                    type="text"
                    value={author}
                    onChange={(e) => setAuthor(e.target.value)}
                    placeholder="匿名の投稿者名（オプション）"
                  />
                )}
              </div>
            </div>
          </div>

          {/* 投稿内容 */}
          <div className="form-group">
            <label>内容</label>
            <textarea
              value={content}
              onChange={(e) => setContent(e.target.value)}
              placeholder={currentTemplate.placeholder}
              rows={8}
            />
          </div>

          {/* メタデータ設定 */}
          <div className="post-metadata">
            <h3>詳細設定</h3>
            
            <div className="form-row">
              <div className="form-group">
                <label>信憑性 ({reliability}%)</label>
                <input
                  type="range"
                  min="0"
                  max="100"
                  value={reliability}
                  onChange={(e) => setReliability(Number(e.target.value))}
                />
              </div>
              
              <div className="form-group">
                <label>重要度 ({importance}/100)</label>
                <input
                  type="range"
                  min="0"
                  max="100"
                  value={importance}
                  onChange={(e) => setImportance(Number(e.target.value))}
                />
              </div>
              
              <div className="form-group">
                <label>ネタバレレベル ({spoilerLevel}/5)</label>
                <input
                  type="range"
                  min="0"
                  max="5"
                  value={spoilerLevel}
                  onChange={(e) => setSpoilerLevel(Number(e.target.value))}
                />
              </div>
            </div>

            {/* タグ管理 */}
            <div className="form-group">
              <label>タグ</label>
              <div className="tag-input-container">
                <input
                  type="text"
                  placeholder="タグを入力してEnter"
                  onKeyPress={(e) => {
                    if (e.key === 'Enter') {
                      addTag(e.currentTarget.value)
                      e.currentTarget.value = ''
                    }
                  }}
                />
                <div className="tags-display">
                  {tags.map(tag => (
                    <span key={tag} className="tag">
                      {tag}
                      <button onClick={() => removeTag(tag)}>×</button>
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* アクションボタン */}
          <div className="form-actions">
            <button className="btn-secondary" onClick={onClose}>
              キャンセル
            </button>
            <button 
              className="btn-primary" 
              onClick={handleSubmit}
              disabled={!title || !content || !author}
            >
              投稿する
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}
